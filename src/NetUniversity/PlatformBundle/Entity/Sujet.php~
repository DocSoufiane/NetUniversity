<?php

namespace NetUniversity\PlatformBundle\Entity;

use Doctrine\ORM\Mapping as ORM;


use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\HttpFoundation\File\File;

/**
 * Sujet
 *
 * @ORM\Table(name="sujet")
 * @ORM\Entity(repositoryClass="NetUniversity\PlatformBundle\Repository\SujetRepository")
 */
class Sujet
{

    /**
   * @ORM\ManyToOne(targetEntity="NetUniversity\PlatformBundle\Entity\Utilisateur")
   * @ORM\JoinColumn(nullable=false)
   */
    private $utilisateur;

    /**
   * @ORM\ManyToOne(targetEntity="NetUniversity\PlatformBundle\Entity\Classe", cascade={"persist"}, inversedBy="sujet")
   * @ORM\JoinColumn(nullable=true)
   */
    private $classe;

    /**
   * @ORM\ManyToOne(targetEntity="NetUniversity\PlatformBundle\Entity\Filiere", inversedBy="sujet")
   * @ORM\JoinColumn(nullable=true)
   */
    private $filiere;

    /**
   * @ORM\ManyToOne(targetEntity="NetUniversity\PlatformBundle\Entity\Departement", inversedBy="sujet")
   * @ORM\JoinColumn(nullable=true)
   */
    private $deppartement;

    /**
   * @ORM\ManyToOne(targetEntity="NetUniversity\PlatformBundle\Entity\Institut", inversedBy="sujet")
   * @ORM\JoinColumn(nullable=true)
   */
    private $institut;

    /**
   * @ORM\ManyToOne(targetEntity="NetUniversity\PlatformBundle\Entity\University", inversedBy="sujet")
   * @ORM\JoinColumn(nullable=true)
   */
    private $university;

    /**
     * @Assert\File(
     *     maxSize = "15024k",
     *     mimeTypes = {"application/pdf", "application/x-pdf", "application/vnd.comicbook-rar", "application/vnd.comicbook+zip", "image/png", "image/vnd.sealedmedia.softseal.jpg", "video/JPEG"},
     *     mimeTypesMessage = "Tail maximal 15 Mo | type de fichier acceptés (PDF, zip, rar, jpeg, jpg, png)"
     * )
     */
    private $file;

    /**
     * @var string
     *
     * @ORM\Column(name="Fichier", type="string", length=255, nullable=true)
     */
    private $Fichier; 


    /**
    * @ORM\ManyToMany(targetEntity="NetUniversity\PlatformBundle\Entity\Utilisateur", cascade={"persist"})
    */
    private $like;

    
    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="Nom", type="string", length=255)
     */
    private $nom;

    /**
     * @var string
     *
     * @ORM\Column(name="etat", type="string", length=255)
     */
    private $etat;

    /**
     * @var string
     *
     * @ORM\Column(name="Detail", type="text")
     */
    private $detail;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="DateDeCreation", type="datetime")
     */
    private $dateDeCreation;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="DateDeModif", type="datetime")
     */
    private $dateDeModif;

    /**
    * @ORM\OneToOne(targetEntity="NetUniversity\PlatformBundle\Entity\Recherche", cascade={"persist"}, cascade={"remove"}, mappedBy="sujet")
    */
    private $recherche;

   /**
   * @ORM\OneToMany(targetEntity="NetUniversity\PlatformBundle\Entity\Commentaire", mappedBy="sujet")
   * @ORM\JoinColumn(nullable=false)
   */
      private $Commentaire;


private $idgroupe;

public function getidgroupe()
{
return $this->idgroupe;
}

public function setidgroupe( $idgroupe)
{
$this->idgroupe = $idgroupe;
}


private $groupe;

public function getgroupe()
{
return $this->groupe;
}

public function setgroupe( $groupe)
{
$this->groupe = $groupe;
}

    /**
     * Get id.
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

  public function getFile()
  {
    return $this->file;
  }

  public function setFile(UploadedFile $file = null)
  {
    $this->file = $file;
  }


    public function upload()
      {
        // Si jamais il n'y a pas de fichier (champ facultatif), on ne fait rien
        if (null === $this->file) {
          return;
        }

        // On récupère le nom original du fichier de l'internaute
        $name = $this->file->getClientOriginalName();

        // On déplace le fichier envoyé dans le répertoire de notre choix
        $this->file->move($this->getUploadRootDir(), $name);

        // On sauvegarde le nom de fichier dans notre attribut $url
        $this->Fichier = '../uploads/Forum/'.$name.$this->id;
        //$this->Cours = '../uploads/Forum/'.$name.$this->id;

      }

    public function getUploadDir()
      {
        // On retourne le chemin relatif vers l'image pour un navigateur (relatif au répertoire /web donc)
        return 'uploads/Forum';
      }

    protected function getUploadRootDir()
      {
        // On retourne le chemin relatif vers l'image pour notre code PHP
        return __DIR__.'/../../../../web/'.$this->getUploadDir();
      }
      
  /**
 * @ORM\PreUpdate
 */  
  public function updateDate()
  {
    $this->setDerniereModif(new \Datetime());
  }



    /**
     * Set nom.
     *
     * @param string $nom
     *
     * @return Sujet
     */
    public function setNom($nom)
    {
        $this->nom = $nom;

        return $this;
    }

    /**
     * Get nom.
     *
     * @return string
     */
    public function getNom()
    {
        return $this->nom;
    }

    /**
     * Set detail.
     *
     * @param string $detail
     *
     * @return Sujet
     */
    public function setDetail($detail)
    {
        $this->detail = $detail;

        return $this;
    }

    /**
     * Get detail.
     *
     * @return string
     */
    public function getDetail()
    {
        return $this->detail;
    }

    /**
     * Set dateDeCrfeation.
     *
     * @param \DateTime $dateDeCrfeation
     *
     * @return Sujet
     */
    public function setDateDeCrfeation($dateDeCrfeation)
    {
        $this->dateDeCrfeation = $dateDeCrfeation;

        return $this;
    }

    /**
     * Get dateDeCrfeation.
     *
     * @return \DateTime
     */
    public function getDateDeCrfeation()
    {
        return $this->dateDeCrfeation;
    }

    /**
     * Set dateDeModif.
     *
     * @param \DateTime $dateDeModif
     *
     * @return Sujet
     */
    public function setDateDeModif($dateDeModif)
    {
        $this->dateDeModif = $dateDeModif;

        return $this;
    }

    /**
     * Get dateDeModif.
     *
     * @return \DateTime
     */
    public function getDateDeModif()
    {
        return $this->dateDeModif;
    }

    /**
     * Set dateDeCreation.
     *
     * @param \DateTime $dateDeCreation
     *
     * @return Sujet
     */
    public function setDateDeCreation($dateDeCreation)
    {
        $this->dateDeCreation = $dateDeCreation;

        return $this;
    }

    /**
     * Get dateDeCreation.
     *
     * @return \DateTime
     */
    public function getDateDeCreation()
    {
        return $this->dateDeCreation;
    }

    /**
     * Set utilisateur.
     *
     * @param \NetUniversity\PlatformBundle\Entity\Utilisateur $utilisateur
     *
     * @return Sujet
     */
    public function setUtilisateur(\NetUniversity\PlatformBundle\Entity\Utilisateur $utilisateur)
    {
        $this->utilisateur = $utilisateur;

        return $this;
    }

    /**
     * Get utilisateur.
     *
     * @return \NetUniversity\PlatformBundle\Entity\Utilisateur
     */
    public function getUtilisateur()
    {
        return $this->utilisateur;
    }

    

    /**
     * Set filiere.
     *
     * @param \NetUniversity\PlatformBundle\Entity\Filiere $filiere
     *
     * @return Sujet
     */
    public function setFiliere(\NetUniversity\PlatformBundle\Entity\Filiere $filiere)
    {
        $this->filiere = $filiere;

        return $this;
    }

    /**
     * Get filiere.
     *
     * @return \NetUniversity\PlatformBundle\Entity\Filiere
     */
    public function getFiliere()
    {
        return $this->filiere;
    }

    /**
     * Set deppartement.
     *
     * @param \NetUniversity\PlatformBundle\Entity\Departement $deppartement
     *
     * @return Sujet
     */
    public function setDeppartement(\NetUniversity\PlatformBundle\Entity\Departement $deppartement)
    {
        $this->deppartement = $deppartement;

        return $this;
    }

    /**
     * Get deppartement.
     *
     * @return \NetUniversity\PlatformBundle\Entity\Departement
     */
    public function getDeppartement()
    {
        return $this->deppartement;
    }

    /**
     * Set institut.
     *
     * @param \NetUniversity\PlatformBundle\Entity\Institut $institut
     *
     * @return Sujet
     */
    public function setInstitut(\NetUniversity\PlatformBundle\Entity\Institut $institut)
    {
        $this->institut = $institut;

        return $this;
    }

    /**
     * Get institut.
     *
     * @return \NetUniversity\PlatformBundle\Entity\Institut
     */
    public function getInstitut()
    {
        return $this->institut;
    }

    /**
     * Set university.
     *
     * @param \NetUniversity\PlatformBundle\Entity\University $university
     *
     * @return Sujet
     */
    public function setUniversity(\NetUniversity\PlatformBundle\Entity\University $university)
    {
        $this->university = $university;

        return $this;
    }

    /**
     * Get university.
     *
     * @return \NetUniversity\PlatformBundle\Entity\University
     */
    public function getUniversity()
    {
        return $this->university;
    }

    /**
     * Set etat.
     *
     * @param string $etat
     *
     * @return Sujet
     */
    public function setEtat($etat)
    {
        $this->etat = $etat;

        return $this;
    }

    /**
     * Get etat.
     *
     * @return string
     */
    public function getEtat()
    {
        return $this->etat;
    }




    /**
     * Constructor
     */
    public function __construct()
    {
        $this->Commentaire = new \Doctrine\Common\Collections\ArrayCollection();
    }

    /**
     * Set fichier.
     *
     * @param string|null $fichier
     *
     * @return Sujet
     */
    public function setFichier($fichier = null)
    {
        $this->Fichier = $fichier;

        return $this;
    }

    /**
     * Get fichier.
     *
     * @return string|null
     */
    public function getFichier()
    {
        return $this->Fichier;
    }

    /**
     * Set recherche.
     *
     * @param \NetUniversity\PlatformBundle\Entity\Recherche|null $recherche
     *
     * @return Sujet
     */
    public function setRecherche(\NetUniversity\PlatformBundle\Entity\Recherche $recherche = null)
    {
        $this->recherche = $recherche;

        return $this;
    }

    /**
     * Get recherche.
     *
     * @return \NetUniversity\PlatformBundle\Entity\Recherche|null
     */
    public function getRecherche()
    {
        return $this->recherche;
    }

    /**
     * Add commentaire.
     *
     * @param \NetUniversity\PlatformBundle\Entity\Commentaire $commentaire
     *
     * @return Sujet
     */
    public function addCommentaire(\NetUniversity\PlatformBundle\Entity\Commentaire $commentaire)
    {
        $this->Commentaire[] = $commentaire;

        return $this;
    }

    /**
     * Remove commentaire.
     *
     * @param \NetUniversity\PlatformBundle\Entity\Commentaire $commentaire
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeCommentaire(\NetUniversity\PlatformBundle\Entity\Commentaire $commentaire)
    {
        return $this->Commentaire->removeElement($commentaire);
    }

    /**
     * Get commentaire.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getCommentaire()
    {
        return $this->Commentaire;
    }

    /**
     * Set classe.
     *
     * @param \NetUniversity\PlatformBundle\Entity\Classe|null $classe
     *
     * @return Sujet
     */
    public function setClasse(\NetUniversity\PlatformBundle\Entity\Classe $classe = null)
    {
        $this->classe = $classe;

        return $this;
    }

    /**
     * Get classe.
     *
     * @return \NetUniversity\PlatformBundle\Entity\Classe|null
     */
    public function getClasse()
    {
        return $this->classe;
    }

    /**
     * Add like.
     *
     * @param \NetUniversity\PlatformBundle\Entity\Utilisateur $like
     *
     * @return Sujet
     */
    public function addLike(\NetUniversity\PlatformBundle\Entity\Utilisateur $like)
    {
        $this->like[] = $like;

        return $this;
    }

    /**
     * Remove like.
     *
     * @param \NetUniversity\PlatformBundle\Entity\Utilisateur $like
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeLike(\NetUniversity\PlatformBundle\Entity\Utilisateur $like)
    {
        return $this->like->removeElement($like);
    }

    /**
     * Get like.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getLike()
    {
        return $this->like;
    }
}
